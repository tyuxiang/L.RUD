/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  reg M_current_map_d, M_current_map_q = 1'h0;
  reg [1:0] M_current_step_d, M_current_step_q = 1'h0;
  reg [11:0] M_map_0_d, M_map_0_q = 1'h0;
  reg [11:0] M_map_1_d, M_map_1_q = 1'h0;
  reg [15:0] M_reg_led_d, M_reg_led_q = 1'h0;
  reg M_answer_player_d, M_answer_player_q = 1'h0;
  reg [3:0] M_current_pos_d, M_current_pos_q = 1'h0;
  reg [31:0] M_num_d, M_num_q = 1'h0;
  reg [31:0] M_seed_d, M_seed_q = 1'h0;
  localparam START_state = 4'd0;
  localparam SET_MAP_state = 4'd1;
  localparam SET_START_state = 4'd2;
  localparam SET_STEP_state = 4'd3;
  localparam IDLE_state = 4'd4;
  localparam CHECK_PLAYER_state = 4'd5;
  localparam CHECK_STEP_state = 4'd6;
  localparam WIN_state = 4'd7;
  localparam ERROR_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  wire [1-1:0] M_ctr_value;
  counter_3 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  wire [32-1:0] M_rng_num;
  reg [1-1:0] M_rng_rst;
  reg [1-1:0] M_rng_next;
  reg [32-1:0] M_rng_seed;
  pn_gen_4 rng (
    .clk(clk),
    .rst(M_rng_rst),
    .next(M_rng_next),
    .seed(M_rng_seed),
    .num(M_rng_num)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_num_d = M_num_q;
    M_current_map_d = M_current_map_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_edge_detector_in = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_rng_seed = M_seed_q;
    M_rng_next = 1'h0;
    M_rng_rst = rst;
    io_led[8+0+7-:8] = M_num_q[8+7-:8];
    io_led[0+0+7-:8] = M_num_q[0+7-:8];
    io_led[0+0+0-:1] = M_current_map_q;
    if (io_dip[16+7+0-:1]) begin
      M_edge_detector_in = M_ctr_value;
    end
    
    case (M_state_q)
      START_state: begin
        io_led[16+7+0-:1] = 1'h1;
        if (io_dip[16+7+0-:1] & M_edge_detector_out) begin
          M_state_d = SET_MAP_state;
        end
      end
      SET_MAP_state: begin
        io_led[16+6+0-:1] = 1'h1;
        M_rng_next = 1'h1;
        M_num_d = M_rng_num;
        M_current_map_d = M_rng_num[0+0-:1];
        if (M_edge_detector_out) begin
          M_state_d = START_state;
        end
      end
      SET_START_state: begin
        led = 1'h1;
      end
      SET_STEP_state: begin
        led = 1'h1;
      end
      IDLE_state: begin
        led = 1'h1;
      end
      CHECK_PLAYER_state: begin
        led = 1'h1;
      end
      CHECK_STEP_state: begin
        led = 1'h1;
      end
      WIN_state: begin
        led = 1'h1;
      end
      ERROR_state: begin
        led = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_current_map_q <= 1'h0;
      M_current_step_q <= 1'h0;
      M_map_0_q <= 1'h0;
      M_map_1_q <= 1'h0;
      M_reg_led_q <= 1'h0;
      M_answer_player_q <= 1'h0;
      M_current_pos_q <= 1'h0;
      M_num_q <= 1'h0;
      M_seed_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_current_map_q <= M_current_map_d;
      M_current_step_q <= M_current_step_d;
      M_map_0_q <= M_map_0_d;
      M_map_1_q <= M_map_1_d;
      M_reg_led_q <= M_reg_led_d;
      M_answer_player_q <= M_answer_player_d;
      M_current_pos_q <= M_current_pos_d;
      M_num_q <= M_num_d;
      M_seed_q <= M_seed_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
