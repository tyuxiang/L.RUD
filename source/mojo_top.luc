module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    output led_strip_0,     // Output 1st column of led strip
    output led_strip_1,     // Output 2nd column of led strip
    output led_strip_2,     // Output 3rd column of led strip
    output led_strip_3,     // Output 4th column of led strip
    input p1_left,          // Input player 1 left button 
    input p1_right,         // Input player 1 right button 
    input p1_up,            // Input player 1 up button 
    input p1_down,          // Input player 1 down button 
    input p2_left,          // Input player 2 left button 
    input p2_right,         // Input player 2 right button 
    input p2_up,            // Input player 2 up button 
    input p2_down,          // Input player 2 down button 
    input reset_button,     // Input reset button
    output countdown_3,     // Output of 3rd countdown led
    output countdown_2,     // Output of 2nd countdown led
    output countdown_1,     // Output of 1st countdown led
    output player1_led,     // Output of 1st player led
    output player2_led      // Output of 2nd player led
  ) {
  
  sig rst;                                    // Reset signal
  new_alu alu;                                // Alu (input: 1st number, 2nd number, alufn) (output:answer based on operation)
  check_player_module check_player_module;    // Check whether button is from correct player
  check_step_module check_step_module;        // Check whether step is correct
  button_module button_module;                // Reads which button is from which player and its LRUD
  convert_to_alu convert_to_alu;              // Reads LRUD and outputs the alufn and 16bit input into alu
  led_module_2 led_module_2;                  // Converts the current position to the bits required to be sent to the led strip
  compute_countdown compute_countdown;        // Takes in the current timing and display on the timer leds accordingly
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // Initialize edge_detector to detect edges for buttons and counter
    edge_detector edge_detector (#RISE(1), #FALL(0));
    edge_detector edge_detector_button0 (#RISE(1), #FALL(0));
    edge_detector edge_detector_button1 (#RISE(1), #FALL(0));
    edge_detector edge_detector_button2 (#RISE(1), #FALL(0));
    edge_detector edge_detector_button3 (#RISE(1), #FALL(0));
    edge_detector edge_detector_button4 (#RISE(1), #FALL(0));
    edge_detector edge_detector_button5 (#RISE(1), #FALL(0));
    edge_detector edge_detector_button6 (#RISE(1), #FALL(0));
    edge_detector edge_detector_button7 (#RISE(1), #FALL(0));
    edge_detector edge_detector_reset (#RISE(1), #FALL(0));
    
    // Initialize button conditioner to stabilize button press
    button_conditioner button_cond_button0;
    button_conditioner button_cond_button1;
    button_conditioner button_cond_button2;
    button_conditioner button_cond_button3;  
    button_conditioner button_cond_button4;  
    button_conditioner button_cond_button5;    
    button_conditioner button_cond_button6;    
    button_conditioner button_cond_button7;     
    button_conditioner button_cond_reset;     
    
    // Initialize module to display light on the led strip
    led_ws2812b led_ws2812b_0(#SIZE(4));
    led_ws2812b led_ws2812b_1(#SIZE(4));
    led_ws2812b led_ws2812b_2(#SIZE(4));
    led_ws2812b led_ws2812b_3(#SIZE(4));
    
    // Initialize random number generator
    pn_gen rng;
    
    counter ctr (#SIZE(8), #DIV(24));   // Initialize counter to count every 2^25(~33.5 million) clock cycle, on MOJO is 50 million clock cycle per reset_cond
    .rst(rst) {
      dff current_map[20];  // Map that is used for the current run
      dff current_step[2];  // Step(Left/Right/Up/Down) that is used currently
      dff step_number[5];   // Number of steps taken already
      
      dff map_0[12];        // Movements of the 0th Map
      dff map_1[12];        // Movements of the 1st Map
      dff map_2[12];        // Movements of the 2nd Map
      dff map_3[12];        // Movements of the 3rd Map
      
      dff map_0_lvl1[16];   // Movements of the 0th Map level 1
      dff map_1_lvl1[16];   // Movements of the 1st Map level 1
      dff map_2_lvl1[16];   // Movements of the 2nd Map level 1
      dff map_3_lvl1[16];   // Movements of the 3rd Map level 1
      
      dff map_0_lvl2[20];   // Movements of the 0th Map level 2
      dff map_1_lvl2[20];   // Movements of the 1st Map level 2
      dff map_2_lvl2[20];   // Movements of the 2nd Map level 2
      dff map_3_lvl2[20];   // Movements of the 3rd Map level 2
      
      dff answer_player;    // Answer key for which player should be pressing the button
      dff current_pos[5];   // Current position of the led that is to be displayed on the led screen
      dff answer;           // Stores the result of whether the input player is correct after checking with the answer key
      dff answer_step;      // Stores the result of whether the input step is correct after checking with the answer key
      dff output_player;    // Stores which player pressed the button
      dff output_lrud[2];   // Stores the step that the player pressed
      dff checking;         // Becomes 1 when in entering the IDLE state (checking whether the input is correct)
      dff difficulty[2];       // Difficulty level of the game
      dff countdown[3];     // value of the countdown (3/2/1) to be displayed
      
      // FSM states
      fsm state = {START, SET_MAP, SET_START, SET_STEP, COMPUTE_STEP, OUTPUT_STEP, IDLE, COMPUTE_PLAYER, CHECK_PLAYER,
                   COMPUTE_LRUD, CHECK_STEP, WIN, ERROR};
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // Input raw inverted reset signal
    rst = reset_cond.out;   // Conditioned reset
    
    led = 8h00;             // Turn LEDs off
    spi_miso = bz;          // Not using SPI
    spi_channel = bzzzz;    // Not using flags
    avr_rx = bz;            // Not using serial port
    edge_detector.in = bz;  // Have 0 output from edge_detector
    
    ctr.rst = rst;          // Set the counter's reset to the reset button
    
    io_led = 3x{{8h00}};    // Turn LEDs off
    
    rng.seed = h00000000;   // Set the seed to be all 0
    rng.next = 0;           // Don't generate new numbers
    rng.rst = rst;          // Assign the reset_button to the rng module
    
    alu.firstNumber = 16x{0};  // Input zero first
    alu.secondNumber = 16x{0}; // Input zero first
    alu.alufn = 6x{0};         // Input zero first
    
    check_player_module.answer_player = 0;  // Input zero first
    check_player_module.player = 0;         // Input zero first
    
    check_step_module.lrud_answer = 00;     // Input zero first
    check_step_module.lrud_player = 00;     // Input zero first
       
    convert_to_alu.lrud = b00;              // Input zero first
   
    // Connect all button inputs to their respective button conditioner and edge_detector
    button_cond_button0.in = p1_left;
    edge_detector_button0.in = button_cond_button0.out;
    
    button_cond_button1.in = p1_right;
    edge_detector_button1.in = button_cond_button1.out;
    
    button_cond_button2.in = p1_up;
    edge_detector_button2.in = button_cond_button2.out;
    
    button_cond_button3.in = p1_down;
    edge_detector_button3.in = button_cond_button3.out;
    
    button_cond_button4.in = p2_left;
    edge_detector_button4.in = button_cond_button4.out;
    
    button_cond_button5.in = p2_right;
    edge_detector_button5.in = button_cond_button5.out;
    
    button_cond_button6.in = p2_up;
    edge_detector_button6.in = button_cond_button6.out;
    
    button_cond_button7.in = p2_down;
    edge_detector_button7.in = button_cond_button7.out;
    
    button_cond_reset.in = reset_button;
    edge_detector_reset.in = button_cond_reset.out;
    
    // Input the data from the buttons into the button module
    button_module.button0 = edge_detector_button0.out;
    button_module.button1 = edge_detector_button1.out;
    button_module.button2 = edge_detector_button2.out;
    button_module.button3 = edge_detector_button3.out;
    button_module.button4 = edge_detector_button4.out;  
    button_module.button5 = edge_detector_button5.out;
    button_module.button6 = edge_detector_button6.out;
    button_module.button7 = edge_detector_button7.out;
    
    // Input the data from the led module to the led strip module
    led_ws2812b_0.colors = led_module_2.ledstrip_0;
    led_ws2812b_1.colors = led_module_2.ledstrip_1;
    led_ws2812b_2.colors = led_module_2.ledstrip_2;
    led_ws2812b_3.colors = led_module_2.ledstrip_3;
    
    // Input data from led strip module to the led strip
    led_strip_0 = led_ws2812b_0.data_out;
    led_strip_1 = led_ws2812b_1.data_out;
    led_strip_2 = led_ws2812b_2.data_out;
    led_strip_3 = led_ws2812b_3.data_out;
    
    // Outputs the player light leds
    player1_led = 1 - answer_player.q;
    player2_led = answer_player.q;
    
    // Input zero into the countdown module first
    compute_countdown.timing = 0;
    
    // Initialize countdown to zero first
    countdown.d = 0;
    
    // Input the countdown register values to the output timer(countdown) leds
    countdown_1 = countdown.q[0];
    countdown_2 = countdown.q[1];
    countdown_3 = countdown.q[2];
    
    // Connect the current position output to the led module input
    led_module_2.led_num = current_pos.q;
    
    // Set all maps here
    // map[3:0] is starting position
    // map[5:4] is 1st step, map[7:6] is 2nd step... so on and so forth
    // 00 is left, 01 is right, 10 is up, 11 is down
    map_0.d = b110101010000; // Start at led0 then [right,right,right,down]
    map_1.d = b100000001111; // Start at led15 then [left,left,left,up]
    map_2.d = b110010001011; // Start at led11 then [left,up,left,down]
    map_3.d = b110001110101; // Start at led5 then [down,right,left,down]
    
    map_0_lvl1.d = b0110001100010010; // Start at led2 then [right,left,down,left,up,right]
    map_1_lvl1.d = b0011010000100110; // Start at led6 then [up,left,left,right,down,left]
    map_2_lvl1.d = b1001101110011101; // Start at led13 then [right,up,down,up,right,up]
    map_3_lvl1.d = b1000110101100100; // Start at led4 then [up,right,right,down,left,up]
    
    map_0_lvl2.d = b11000100111010011001; // Start at led9 then [right,up,up,down,left,right,left,down]
    map_1_lvl2.d = b11010011100011110011; // Start at led3 then [down,down,left,up,down,left,right,down]
    map_2_lvl2.d = b01010011010110001101; // Start at led13 then [left,up,right,right,down,left,right,right]
    map_3_lvl2.d = b00100111011100101010; // Start at led10 then [up,left,down,right,down,right,up,left]
    
    edge_detector.in = ctr.value; // Input value of counter into edge detector
      
    case (state.q) {
      // Initial state where all values are reset/initialized
      state.START:
        // Initialize or resets all values that needs to be reset before the start of a new game
        answer_player.d = 0;        // Initialize starting player to answer to be player 1
        step_number.d = b00000;     // Initialize step number to be 0
        io_led[2][7] = 1;
        checking.d = 0;
        current_pos.d = 20;
        current_map.d = b000000000000;
        
        // When timer is up, transit to the next state
        // Timer is used to give some time for the player to prepare before the steps are shown
        if(edge_detector.out){
          rng.next = 1;
          state.d = state.SET_MAP;
        }
        
      // State to set the map depending on the random number generated
      state.SET_MAP:
        //io_led[2][6] = 1;
        
        // Depending on the random number generated and the difficulty level, choose the map to be used this round
        // Then, save the chosen map as the current map
        if(difficulty.q == 0){
          if(rng.num[1:0] == b00){
            current_map.d = map_0.q;
          }
          else if(rng.num[1:0] == 1){
            current_map.d = map_1.q;
          }
          else if(rng.num[1:0] == 2){
            current_map.d = map_2.q;
          }
          else if(rng.num[1:0] == 3){
            current_map.d = map_3.q;
          }
        }
        else if(difficulty.q == b01){
          if(rng.num[1:0] == 0){
            current_map.d = map_0_lvl1.q;
          }
          else if(rng.num[1:0] == 1){
            current_map.d = map_1_lvl1.q;
          }
          else if(rng.num[1:0] == 2){
            current_map.d = map_2_lvl1.q;
          }
          else if(rng.num[1:0] == 3){
            current_map.d = map_3_lvl1.q;
          }
        }
        else if(difficulty.q == b10){
          if(rng.num[1:0] == 0){
            current_map.d = map_0_lvl2.q;
          }
          else if(rng.num[1:0] == 1){
            current_map.d = map_1_lvl2.q;
          }
          else if(rng.num[1:0] == 2){
            current_map.d = map_2_lvl2.q;
          }
          else if(rng.num[1:0] == 3){
            current_map.d = map_3_lvl2.q;
          }
        }
        
        // When timer is up, transit to the next state
        // Timer is used to give some time for the player to prepare before the steps are shown
        if(edge_detector.out){
          state.d = state.SET_START;
        }
      
      // State to set the starting position by refering to the current map
      state.SET_START:
        //io_led[2][5] = 1;
        
        //update current step with first 4 bits of map
        current_pos.d = current_map.q[3:0];
        
        // When timer is up, transit to the next state
        // Timer is used to give some time for the player to register the current led shown on the sreen
        if(edge_detector.out){
          state.d = state.SET_STEP;
        }
        
      // State to grab the current step to be moved from the current map depending on the step number
      state.SET_STEP:
        //io_led[2][4] = 1;
        
        // Set the step based on step_number
        // Increase the step number counter by 1 after the current step is set
        // Only transit to the next stage when timer is up such that the player has time to register the new step
        if(step_number.q == 0){
          current_step.d = current_map.q[5:4];
          if(edge_detector.out){
            step_number.d = step_number.q + 1;
            state.d = state.COMPUTE_STEP;
          }
        }
        else if(step_number.q == 1){
          current_step.d = current_map.q[7:6];
          if(edge_detector.out){
            step_number.d = step_number.q + 1;
            state.d = state.COMPUTE_STEP;
          }
        }
        else if(step_number.q == 2){
          current_step.d = current_map.q[9:8];
          if(edge_detector.out){
            step_number.d = step_number.q + 1;
            state.d = state.COMPUTE_STEP;
          }
        }
        else if(step_number.q == 3){
          current_step.d = current_map.q[11:10];
          if(edge_detector.out){
            step_number.d = step_number.q + 1;
            state.d = state.COMPUTE_STEP;
          }
        }
        else if(step_number.q == 4){
          current_step.d = current_map.q[13:12];
          if(edge_detector.out){
            step_number.d = step_number.q + 1;
            state.d = state.COMPUTE_STEP;
          }
        }
        else if(step_number.q == 5){
          current_step.d = current_map.q[15:14];
          if(edge_detector.out){
            step_number.d = step_number.q + 1;
            state.d = state.COMPUTE_STEP;
          }
        }
        else if(step_number.q == 6){
          current_step.d = current_map.q[17:16];
          if(edge_detector.out){
            step_number.d = step_number.q + 1;
            state.d = state.COMPUTE_STEP;
          }
        }
        else if(step_number.q == 7){
          current_step.d = current_map.q[19:18];
          if(edge_detector.out){
            step_number.d = step_number.q + 1;
            state.d = state.COMPUTE_STEP;
          }
        }
      
      // State to compute the step
      state.COMPUTE_STEP:
        //io_led[2][3] = 1;
        // Input current step into alu
        // Perform relevant calculations according to the step
        // Instructions to be keyed into alu are done in the convert_to_alu module
        // Actual calculations are done in the new_alu module
        // Left (minus 1), Right(Plus 1), Up(minus 4), Down(plus 4)
        convert_to_alu.lrud = current_step.q;
        alu.firstNumber = current_pos.q;
        alu.secondNumber = convert_to_alu.value;
        alu.alufn = convert_to_alu.alufn;
        
        // Update the new current pos
        current_pos.d = alu.answer[3:0];
        state.d = state.OUTPUT_STEP;
      
      // State to show the new step and give time to the player to register the new step
      state.OUTPUT_STEP:
        //io_led[2][2] = 1;
        
        // If in the checking player's answers mode, go directly to the idle state
        if(checking.q == 1){
          if(edge_detector.out){
            ctr.rst = 1;
            state.d = state.IDLE;
          }
        }
        else{
          // If step number has reached the final step according to the difficulty level, then proceed to idle state
          // Else go back to the set step state
          if(edge_detector.out & difficulty.q == 0){
            if(step_number.q == 4){
              // Re-initialize the step number and the current pos
              ctr.rst = 1;
              step_number.d = 0;
              current_pos.d = current_map.q[3:0];
              state.d = state.IDLE;
            }
            else{
              state.d = state.SET_STEP;
            }
          }
          else if(edge_detector.out & difficulty.q == 1){
            if(step_number.q == 6){
              // Re-initialize the step number and the current pos
              ctr.rst = 1;
              step_number.d = 0;
              current_pos.d = current_map.q[3:0];
              state.d = state.IDLE;
            }
            else{
              state.d = state.SET_STEP;
            }
          }
          else if(edge_detector.out & difficulty.q == 2){
            if(step_number.q == 8){
              // Re-initialize the step number and the current pos
              ctr.rst = 1;
              step_number.d = 0;
              current_pos.d = current_map.q[3:0];
              state.d = state.IDLE;
            }
            else{
              state.d = state.SET_STEP;
            }
          }
        }
      
      // The state that waits for player button press and saves the next step that the player should input
      state.IDLE:
        //io_led[2][1] = 1;
        
        // Set the reg to 1 to show that we are in the checking process
        checking.d = 1;
        
        // Convert counter value to the values to be outputed on the 3 timer leds
        compute_countdown.timing = 3 - ctr.value/4;
        countdown.d = compute_countdown.led_val;
        
        // When counter value reaches 30 is ard <10sec therefore when everytime counter reaches 4 is roughly 1sec
        // This gives us a rough estimate of 3 sec when counter reaches 12
        if(ctr.value == 12){
          state.d = state.ERROR;
        }
        
        // Set the current step(answer key) according to the step_number
        if(step_number.q == 0){
          current_step.d = current_map.q[5:4];
        }
        else if(step_number.q == 1){
          current_step.d = current_map.q[7:6];
        }
        else if(step_number.q == 2){
          current_step.d = current_map.q[9:8];
        }
        else if(step_number.q == 3){
          current_step.d = current_map.q[11:10];
        }
        else if(step_number.q == 4){
          current_step.d = current_map.q[13:12];
        }
        else if(step_number.q == 5){
          current_step.d = current_map.q[15:14];
        }
        else if(step_number.q == 6){
          current_step.d = current_map.q[17:16];
        }
        else if(step_number.q == 7){
          current_step.d = current_map.q[19:18];
        }
        
        // Only when any one of the button is pressed, will it go to the next state
        // Saves the value of which player pressed as well as which direction they pressed
        if(edge_detector_button0.out == 1 | edge_detector_button1.out == 1 | edge_detector_button2.out == 1 | edge_detector_button3.out == 1 | edge_detector_button4.out == 1 | edge_detector_button5.out == 1 | edge_detector_button6.out == 1 | edge_detector_button7.out == 1){
          output_player.d = button_module.player;
          output_lrud.d = button_module.lrud;
          state.d = state.COMPUTE_PLAYER;
        }
        
      // State that checks whether the correct player pressed the button and saves the answer in the corresponding register
      state.COMPUTE_PLAYER:
        // Inputs the player that pressed into the check player module that uses the ALU's CMPEQ function
        // Outputs the answer into the answer register
        check_player_module.answer_player = answer_player.q;
        check_player_module.player = output_player.q;
        answer.d = check_player_module.check_player;
        state.d = state.CHECK_PLAYER;
        
      // State that checks if the answer is correct
      // If it is correct, go on to the compute lrud state
      // Else, go to the error state
      state.CHECK_PLAYER:
        //io_led[2][0] = 1;
        //io_led[1][0] = answer.q;
        if(answer.q == 1){
          // Flip the answer of the correct player to the other player
          answer_player.d = 1 - answer_player.q;
          state.d = state.COMPUTE_LRUD;
        }
        else{
          state.d = state.ERROR;
        }
      
      // State to check whether the player input the correct step using the check_step_module which uses the CMPEQ ALU function
      state.COMPUTE_LRUD:
        check_step_module.lrud_player = output_lrud.q;
        check_step_module.lrud_answer = current_step.q;
        answer_step.d = check_step_module.out;
        state.d = state.CHECK_STEP;
        
      // If correct, check if it is the last step according to the corresponding difficulty level
      // If it is the last step, go to the win state
      // Else, go back to the compute step state to display the new position
      // If it is wrong, go to the error state
      state.CHECK_STEP:
        //io_led[2][1] = 1;
        
        if(answer_step.q == 1){
          if(difficulty.q == 0){
            if(step_number.q == 3){
              state.d = state.WIN;
            }
            else{
              step_number.d = step_number.q + 1;
              state.d = state.COMPUTE_STEP;
            }
          }
          else if(difficulty.q == 1){
            if(step_number.q == 5){
              state.d = state.WIN;
            }
            else{
              step_number.d = step_number.q + 1;
              state.d = state.COMPUTE_STEP;
            }
          }
          else if(difficulty.q == 2){
            if(step_number.q == 7){
              state.d = state.WIN;
            }
            else{
              step_number.d = step_number.q + 1;
              state.d = state.COMPUTE_STEP;
            }
          }
        }
        else{
          state.d = state.ERROR;
        }
        
      // State to display the winning screen and increase difficulty if the reset button is pressed
      state.WIN:
        // Set all led to green
        current_pos.d = 16;
        if(edge_detector_reset.out){
          if(difficulty.q <2){
            difficulty.d = difficulty.q + 1;
          }
          else{
            difficulty.d = 0;
          }
          state.d = state.START;
        }
        
      // State to display the wrong input screen and reset difficulty to 0 if the reset button is pressed
      state.ERROR:
        // Set all led to red
        current_pos.d = 17;
        if(edge_detector_reset.out){
          difficulty.d = 0;
          state.d = state.START;
        }
    }
  }
}